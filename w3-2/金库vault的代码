// 1、ERC20 Token的代码

//SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

// import "openzeppelin-contracts/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
// import "openzeppelin-contracts/token/ERC20/ERC20.sol";


contract JasonToken is ERC20 {
    constructor() ERC20(unicode"我的代币", "JasonToken") {
        _mint(msg.sender, 100000 * 10 ** 18);
    }
}



// 2、金库vault的代码

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;


// import "openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol";
// import "openzeppelin-contracts/contracts/token/ERC20/IERC20.sol";
// import "openzeppelin-contracts/contracts/interfaces/IERC1820Registry.sol";

// import "@openzeppelin/contracts/";
import "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/interfaces/IERC1820Registry.sol";

interface TokenRecipient {
    function tokensReceived(address sender, uint amount) external returns (bool);
}


contract Vault is TokenRecipient{
    mapping(address => uint) public deposited;
    address public immutable token;

    
    constructor(address _token) {
        token = _token;
        
    }


    // 手动授权、再转账
    function deposit(address user, uint amount) public {
        require(IERC20(token).transferFrom(msg.sender, address(this), amount), "Transfer from error");
        deposited[user] += amount;
    }
    // 授权&转账一起进行
    function permitDeposit(address user, uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external {
        IERC20Permit(token).permit(msg.sender, address(this), amount, deadline, v, r, s); //线下验证授权
        deposit(user, amount); //再进行转账
    }
  

    // 收款时被回调
    function tokensReceived(address sender, uint amount) override external returns (bool) {
        require(msg.sender == token, "invalid"); //要求只有token才能调用
        deposited[sender] += amount;
        return true;
    }


    // 提取本人的所有存款
    function withdraw() public{
        uint amount = deposited[msg.sender];
        require(amount>0, "no amount in this vault");
        deposited[msg.sender] = 0;

        (bool success, ) = msg.sender.call{value: amount}("");
        require(success, "failed to withdraw");
    }

}
